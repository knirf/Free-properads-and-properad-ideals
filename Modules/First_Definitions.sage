##############################################################################################################
# DEFINITIONS OF CLASSIC OBJECTS #############################################################################
##############################################################################################################

print("Generating first objects, properads and ideals, could take a few seconds")
print("If you don't have any file with these properads, it could take some minutes")
print("You can read readme.txt for more informations.")
    
#Here we create the basic tools for creating a classic free properad : a product, a coproduct and two lists of generators.

product = Vertex(1, 2, "prod")
coproduct = Vertex(2, 1, "coprod")

generators = [product, coproduct] #Generators as vertices

generators_perm = product.graph().all_Graph_Perm() + coproduct.graph().all_Graph_Perm() #Generators as Graph_Perm's

#Free properads generated by generators and generators_perm + weight 4 or 3. These weights because they are quite quick to generate, but we might need weight 4 for both.

print("Classic properad without permutations : Prop_classic")

Prop_classic = Free_Properad(generators, 'Prop_classic') 
while Prop_classic.generated_weights[-1]<4:
        Prop_classic.generate_weight(Prop_classic.generated_weights[-1]+1)

print("Classic properad with permutations : Prop_classic_perm")

Prop_classic_perm = Free_Properad(generators_perm, 'Prop_classic_perm')
while Prop_classic_perm.generated_weights[-1]<4:
        Prop_classic_perm.generate_weight(Prop_classic_perm.generated_weights[-1]+1)

#Classic graphs in Prop_classic_perm

jesus1212 = Prop_classic_perm.by_arity(2, (2, 2))[0]
jesus1221 = Prop_classic_perm.by_arity(2, (2, 2))[2]
jesus2112 = Prop_classic_perm.by_arity(2, (2, 2))[1]
jesus2121 = Prop_classic_perm.by_arity(2, (2, 2))[3]

leftfish1212 = Prop_classic_perm.by_arity(2, (2, 2))[4]
leftfish1221 = Prop_classic_perm.by_arity(2, (2, 2))[5]
leftfish2112 = Prop_classic_perm.by_arity(2, (2, 2))[6]
leftfish2121 = Prop_classic_perm.by_arity(2, (2, 2))[7]

rightcamel1212 = Prop_classic_perm.by_arity(2, (2, 2))[10]
rightcamel1221 = Prop_classic_perm.by_arity(2, (2, 2))[11]
rightcamel2112 = Prop_classic_perm.by_arity(2, (2, 2))[8]
rightcamel2121 = Prop_classic_perm.by_arity(2, (2, 2))[9]

leftcamel1212 = Prop_classic_perm.by_arity(2, (2, 2))[13]
leftcamel1221 = Prop_classic_perm.by_arity(2, (2, 2))[12]
leftcamel2112 = Prop_classic_perm.by_arity(2, (2, 2))[15]
leftcamel2121 = Prop_classic_perm.by_arity(2, (2, 2))[14]

rightfish1212 = Prop_classic_perm.by_arity(2, (2, 2))[19]
rightfish1221 = Prop_classic_perm.by_arity(2, (2, 2))[18]
rightfish2112 = Prop_classic_perm.by_arity(2, (2, 2))[17]
rightfish2121 = Prop_classic_perm.by_arity(2, (2, 2))[16]

leftcomb123 = Prop_classic_perm.by_arity(2, (1, 3))[0]
leftcomb132 = Prop_classic_perm.by_arity(2, (1, 3))[1]
leftcomb213 = Prop_classic_perm.by_arity(2, (1, 3))[3]
leftcomb231 = Prop_classic_perm.by_arity(2, (1, 3))[2]
leftcomb312 = Prop_classic_perm.by_arity(2, (1, 3))[4]
leftcomb321 = Prop_classic_perm.by_arity(2, (1, 3))[5]

rightcomb123 = Prop_classic_perm.by_arity(2, (1, 3))[8]
rightcomb132 = Prop_classic_perm.by_arity(2, (1, 3))[11]
rightcomb213 = Prop_classic_perm.by_arity(2, (1, 3))[7]
rightcomb231 = Prop_classic_perm.by_arity(2, (1, 3))[10]
rightcomb312 = Prop_classic_perm.by_arity(2, (1, 3))[6]
rightcomb321 = Prop_classic_perm.by_arity(2, (1, 3))[9]

leftcocomb123 = Prop_classic_perm.by_arity(2, (3, 1))[0]
leftcocomb132 = Prop_classic_perm.by_arity(2, (3, 1))[1]
leftcocomb213 = Prop_classic_perm.by_arity(2, (3, 1))[3]
leftcocomb231 = Prop_classic_perm.by_arity(2, (3, 1))[2]
leftcocomb312 = Prop_classic_perm.by_arity(2, (3, 1))[4]
leftcocomb321 = Prop_classic_perm.by_arity(2, (3, 1))[5]

rightcocomb123 = Prop_classic_perm.by_arity(2, (3, 1))[8]
rightcocomb132 = Prop_classic_perm.by_arity(2, (3, 1))[11]
rightcocomb213 = Prop_classic_perm.by_arity(2, (3, 1))[7]
rightcocomb231 = Prop_classic_perm.by_arity(2, (3, 1))[10]
rightcocomb312 = Prop_classic_perm.by_arity(2, (3, 1))[6]
rightcocomb321 = Prop_classic_perm.by_arity(2, (3, 1))[9]

#Classic relations

assoc123 = [[leftcomb123, 1], [rightcomb123, -1]]
assoc132 = [[leftcomb132, 1], [rightcomb132, -1]]
assoc213 = [[leftcomb213, 1], [rightcomb213, -1]]
assoc231 = [[leftcomb231, 1], [rightcomb231, -1]]
assoc312 = [[leftcomb312, 1], [rightcomb312, -1]]
assoc321 = [[leftcomb321, 1], [rightcomb321, -1]]
coassoc123 = [[leftcocomb123, 1], [rightcocomb123, -1]]
coassoc132 = [[leftcocomb132, 1], [rightcocomb132, -1]]
coassoc213 = [[leftcocomb213, 1], [rightcocomb213, -1]]
coassoc231 = [[leftcocomb231, 1], [rightcocomb231, -1]]
coassoc312 = [[leftcocomb312, 1], [rightcocomb312, -1]]
coassoc321 = [[leftcocomb321, 1], [rightcocomb321, -1]]
assoc = [assoc123, assoc132, assoc213, assoc231, assoc312, assoc321]
coassoc = [coassoc123, coassoc132, coassoc213, coassoc231, coassoc312, coassoc321]

#Polynomial rings, quotient, and polynomial relations

Ra.<a1, a2, a3, a4> = QQ[]
Sa = Ra.quotient([a1^2 - a1, a2^2 - a2, a3^2 - a3, a4^2 - a4])
ring = Ra
is_sparse = False

rewritting1212 = [[jesus1212, 1], [rightcamel1212, -a1], [leftcamel1212, -a2], [leftfish1212, -a3], [rightfish1212, -a4]]
rewritting1221 = [[jesus1221, 1], [rightcamel1221, -a1], [leftcamel1221, -a2], [leftfish1221, -a3], [rightfish1221, -a4]]
rewritting2112 = [[jesus2112, 1], [rightcamel2112, -a1], [leftcamel2112, -a2], [leftfish2112, -a3], [rightfish2112, -a4]]
rewritting2121 = [[jesus2121, 1], [rightcamel2121, -a1], [leftcamel2121, -a2], [leftfish2121, -a3], [rightfish2121, -a4]]
rewritting = [rewritting1212, rewritting1221, rewritting2112, rewritting2121]
elements_init = rewritting + assoc + coassoc

#Classic ideal with polynomial relations + step 1 of generation.

print("Classic ideal with Polynomial relations : Ideal_classic_polynomials")

Ideal_classic_polynomials = Ideal_Properad(Prop_classic_perm, elements_init, 'Ideal_classic_polynomials')
if Ideal_classic_polynomials.generated_steps[-1] == 0:
    Ideal_classic_polynomials.generate_next_weight()
    
#Polynomial relations for the Koszul dual

jesus_rightcamel1212 = [[jesus1212, a1], [rightcamel1212, -1]]
jesus_rightcamel1221 = [[jesus1221, a1], [rightcamel1221, -1]]
jesus_rightcamel2112 = [[jesus2112, a1], [rightcamel2112, -1]]
jesus_rightcamel2121 = [[jesus2121, a1], [rightcamel2121, -1]]
jesus_rightcamel = [jesus_rightcamel1212, jesus_rightcamel1221, jesus_rightcamel2112, jesus_rightcamel2121]

jesus_leftcamel1212 = [[jesus1212, a2], [leftcamel1212, -1]]
jesus_leftcamel1221 = [[jesus1221, a2], [leftcamel1221, -1]]
jesus_leftcamel2112 = [[jesus2112, a2], [leftcamel2112, -1]]
jesus_leftcamel2121 = [[jesus2121, a2], [leftcamel2121, -1]]
jesus_leftcamel = [jesus_leftcamel1212, jesus_leftcamel1221, jesus_leftcamel2112, jesus_leftcamel2121]

jesus_leftfish1212 = [[jesus1212, a3], [leftfish1212, -1]]
jesus_leftfish1221 = [[jesus1221, a3], [leftfish1221, -1]]
jesus_leftfish2112 = [[jesus2112, a3], [leftfish2112, -1]]
jesus_leftfish2121 = [[jesus2121, a3], [leftfish2121, -1]]
jesus_leftfish = [jesus_leftfish1212, jesus_leftfish1221, jesus_leftfish2112, jesus_leftfish2121]

jesus_rightfish1212 = [[jesus1212, a4], [rightfish1212, -1]]
jesus_rightfish1221 = [[jesus1221, a4], [rightfish1221, -1]]
jesus_rightfish2112 = [[jesus2112, a4], [rightfish2112, -1]]
jesus_rightfish2121 = [[jesus2121, a4], [rightfish2121, -1]]
jesus_rightfish = [jesus_rightfish1212, jesus_rightfish1221, jesus_rightfish2112, jesus_rightfish2121]

relations_orth = jesus_rightcamel + jesus_leftcamel + jesus_leftfish + jesus_rightfish + assoc + coassoc

#Orthogonal ideal.

print("Orthogonal ideal with polynomial relations : Ideal_orth_polynomials")

Ideal_orth_polynomials = Ideal_Properad(Prop_classic_perm, relations_orth, 'Ideal_orth_polynomials')
if Ideal_orth_polynomials.generated_steps[-1] == 0:
    Ideal_orth_polynomials.generate_next_weight()